/* The following code was generated by JFlex 1.4.3 on 3/23/15 11:37 AM */

package net.project.lexer.structure;

import java_cup.runtime.Symbol;
import net.project.parser.structure.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/23/15 11:37 AM from the specification file
 * <tt>structure.jflex</tt>
 */
public class StructureLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\1\0\1\5\23\0\1\5\1\0\1\4\11\0"+
    "\1\10\1\33\1\0\1\3\12\73\1\0\1\12\1\2\1\11\1\1"+
    "\2\0\1\23\1\25\1\13\1\27\1\30\1\16\1\20\1\36\1\17"+
    "\1\0\1\26\1\40\1\34\1\15\1\14\1\35\1\41\1\22\1\31"+
    "\1\24\1\21\1\37\1\0\1\32\6\0\1\71\1\0\1\53\1\55"+
    "\1\43\1\57\1\60\1\46\1\50\1\65\1\47\1\42\1\56\1\67"+
    "\1\63\1\45\1\44\1\64\1\70\1\52\1\61\1\54\1\51\1\66"+
    "\1\42\1\62\2\42\1\6\1\0\1\7\u05e2\0\12\72\206\0\12\72"+
    "\306\0\12\72\u019c\0\12\72\166\0\12\72\166\0\12\72\166\0\12\72"+
    "\166\0\12\72\166\0\12\72\166\0\12\72\166\0\12\72\166\0\12\72"+
    "\340\0\12\72\166\0\12\72\106\0\12\72\u0116\0\12\72\106\0\12\72"+
    "\u0746\0\12\72\46\0\12\72\u012c\0\12\72\200\0\12\72\246\0\12\72"+
    "\6\0\12\72\266\0\12\72\126\0\12\72\206\0\12\72\6\0\12\72"+
    "\u89c6\0\12\72\u02a6\0\12\72\46\0\12\72\306\0\12\72\166\0\12\72"+
    "\u0196\0\12\72\u5316\0\12\72\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\3\1\1\10\10\0\1\11\10\0\1\12\1\0\1\12"+
    "\23\0\1\13\56\0\1\14\1\15\1\0\1\16\4\0"+
    "\1\17\1\0\1\20\13\0\1\21\4\0\1\22\5\0"+
    "\1\23\1\0\1\24\1\0\1\25\1\26\1\27\4\0"+
    "\1\30\1\0\1\31\5\0\1\32\4\0\1\33\1\0"+
    "\1\34\10\0\1\35\2\0\1\36\1\0\1\37\2\0"+
    "\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\360\0\u012c\0\u0168\0\u01a4\0\u01e0\0\u021c"+
    "\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u012c\0\u03c0"+
    "\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\74"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u05dc\0\u05dc\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\74\0\74\0\u1518\0\74"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\74\0\u1644\0\74\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\74\0\u1914\0\u1950\0\u198c\0\u19c8\0\74"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\74\0\u1b30\0\74"+
    "\0\u1b6c\0\74\0\74\0\74\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\74\0\u1c98\0\74\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\74\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\74\0\u1ef0\0\74"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\74\0\u210c\0\u2148\0\74\0\u2184\0\74\0\u21c0\0\u21fc"+
    "\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\17\2\1\13\7\2\20\14\1\15\6\14"+
    "\1\2\2\16\77\0\1\17\7\0\1\20\2\0\1\21"+
    "\6\0\1\22\1\0\1\23\13\0\1\20\2\0\1\21"+
    "\6\0\1\22\1\0\1\23\14\0\3\24\1\25\1\0"+
    "\67\24\33\0\1\26\102\0\30\27\1\0\1\27\33\0"+
    "\1\26\6\0\30\27\1\0\1\27\72\0\2\16\13\0"+
    "\1\30\2\0\1\31\6\0\1\32\1\0\1\33\13\0"+
    "\1\30\2\0\1\31\6\0\1\32\1\0\1\33\30\0"+
    "\1\34\27\0\1\34\46\0\1\35\27\0\1\35\47\0"+
    "\1\36\27\0\1\36\50\0\1\37\27\0\1\37\13\0"+
    "\4\24\1\40\67\24\3\41\1\24\1\42\67\41\13\0"+
    "\1\43\1\0\1\44\1\0\1\45\3\0\1\46\1\47"+
    "\1\50\1\0\1\51\1\52\3\0\1\53\1\0\1\54"+
    "\1\55\3\0\1\43\1\0\1\44\1\0\1\45\3\0"+
    "\1\46\1\47\1\50\1\0\1\51\1\52\2\0\1\53"+
    "\1\0\1\54\1\55\21\0\1\56\27\0\1\56\46\0"+
    "\1\57\27\0\1\57\47\0\1\60\27\0\1\60\50\0"+
    "\1\61\27\0\1\61\30\0\1\62\27\0\1\62\46\0"+
    "\1\63\27\0\1\63\36\0\1\64\27\0\1\64\61\0"+
    "\1\65\27\0\1\65\12\0\3\41\1\25\1\66\67\41"+
    "\3\67\1\70\1\66\67\67\22\0\1\71\27\0\1\71"+
    "\35\0\1\72\27\0\1\72\63\0\1\73\26\0\1\73"+
    "\32\0\1\74\27\0\1\74\40\0\1\75\27\0\1\75"+
    "\40\0\1\76\23\0\1\77\3\0\1\76\22\0\1\77"+
    "\34\0\1\100\27\0\1\100\30\0\1\101\27\0\1\101"+
    "\56\0\1\102\27\0\1\102\43\0\1\103\27\0\1\103"+
    "\32\0\1\104\27\0\1\104\41\0\1\105\27\0\1\105"+
    "\46\0\1\106\27\0\1\106\36\0\1\107\27\0\1\107"+
    "\61\0\1\110\27\0\1\110\30\0\1\111\27\0\1\111"+
    "\46\0\1\112\27\0\1\112\50\0\1\113\27\0\1\113"+
    "\34\0\1\114\27\0\1\114\24\0\3\67\1\0\70\67"+
    "\30\0\1\115\27\0\1\115\47\0\1\116\26\0\1\116"+
    "\33\0\1\117\27\0\1\117\54\0\1\120\26\0\1\120"+
    "\45\0\1\121\26\0\1\121\24\0\1\122\16\0\1\123"+
    "\10\0\1\122\15\0\1\123\24\0\1\124\27\0\1\124"+
    "\60\0\1\125\27\0\1\125\42\0\1\126\27\0\1\126"+
    "\37\0\1\127\27\0\1\127\41\0\1\130\27\0\1\130"+
    "\50\0\1\131\27\0\1\131\32\0\1\132\27\0\1\132"+
    "\46\0\1\133\27\0\1\133\50\0\1\134\27\0\1\134"+
    "\34\0\1\135\27\0\1\135\43\0\1\136\27\0\1\136"+
    "\46\0\1\137\27\0\1\137\41\0\1\140\27\0\1\140"+
    "\43\0\1\141\27\0\1\141\52\0\1\142\27\0\1\142"+
    "\41\0\1\143\27\0\1\143\36\0\1\144\27\0\1\144"+
    "\46\0\1\145\27\0\1\145\34\0\1\146\27\0\1\146"+
    "\50\0\1\147\27\0\1\147\47\0\1\150\27\0\1\150"+
    "\57\0\1\151\26\0\1\151\16\0\1\152\10\0\1\153"+
    "\16\0\1\152\10\0\1\153\53\0\1\154\26\0\1\154"+
    "\33\0\1\155\27\0\1\155\34\0\1\156\27\0\1\156"+
    "\52\0\1\157\27\0\1\157\37\0\1\160\27\0\1\160"+
    "\46\0\1\161\27\0\1\161\41\0\1\162\27\0\1\162"+
    "\43\0\1\163\27\0\1\163\43\0\1\164\27\0\1\164"+
    "\53\0\1\165\27\0\1\165\35\0\1\166\27\0\1\166"+
    "\36\0\1\167\27\0\1\167\45\0\1\170\27\0\1\170"+
    "\46\0\1\171\27\0\1\171\51\0\1\172\27\0\1\172"+
    "\44\0\1\173\27\0\1\173\33\0\1\174\27\0\1\174"+
    "\44\0\1\175\27\0\1\175\43\0\1\176\27\0\1\176"+
    "\40\0\1\177\27\0\1\177\54\0\1\200\27\0\1\200"+
    "\33\0\1\201\27\0\1\201\53\0\1\202\27\0\1\202"+
    "\35\0\1\203\27\0\1\203\36\0\1\204\27\0\1\204"+
    "\47\0\1\205\27\0\1\205\23\0\1\206\106\0\1\207"+
    "\27\0\1\207\30\0\1\210\116\0\1\211\27\0\1\211"+
    "\47\0\1\212\27\0\1\212\30\0\1\213\27\0\1\213"+
    "\56\0\1\214\27\0\1\214\32\0\1\215\27\0\1\215"+
    "\45\0\1\216\27\0\1\216\42\0\1\217\27\0\1\217"+
    "\44\0\1\220\27\0\1\220\23\0\1\221\106\0\1\222"+
    "\27\0\1\222\30\0\1\223\114\0\1\224\27\0\1\224"+
    "\42\0\1\225\27\0\1\225\36\0\1\226\27\0\1\226"+
    "\64\0\1\227\26\0\1\227\26\0\1\230\27\0\1\230"+
    "\40\0\1\231\27\0\1\231\51\0\1\232\27\0\1\232"+
    "\42\0\1\233\27\0\1\233\45\0\1\234\27\0\1\234"+
    "\35\0\1\235\27\0\1\235\57\0\1\236\27\0\1\236"+
    "\25\0\1\237\27\0\1\237\52\0\1\240\27\0\1\240"+
    "\44\0\1\241\27\0\1\241\35\0\1\242\27\0\1\242"+
    "\52\0\1\243\27\0\1\243\46\0\1\244\27\0\1\244"+
    "\33\0\1\245\27\0\1\245\50\0\1\246\27\0\1\246"+
    "\46\0\1\247\27\0\1\247\33\0\1\250\27\0\1\250"+
    "\25\0\1\251\106\0\1\252\27\0\1\252\46\0\1\253"+
    "\27\0\1\253\25\0\1\254\106\0\1\255\27\0\1\255"+
    "\44\0\1\256\27\0\1\256\42\0\1\257\27\0\1\257"+
    "\44\0\1\260\27\0\1\260\43\0\1\247\27\0\1\247"+
    "\27\0\1\261\72\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\6\11\4\1\10\0\1\1\10\0"+
    "\1\11\1\0\1\1\23\0\1\1\56\0\2\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\11\13\0\1\11\4\0"+
    "\1\11\5\0\1\11\1\0\1\11\1\0\3\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\1\11\1\0"+
    "\1\11\10\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol( int type ) {
        return new Symbol( type, yyline, yycolumn );
    }

    private Symbol symbol( int type, Object value ) {
        return new Symbol( type, yyline, yycolumn, value );
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StructureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public StructureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 290) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return symbol( sym.end_design );
          }
        case 33: break;
        case 21: 
          { return symbol( sym.x_name );
          }
        case 34: break;
        case 13: 
          { return symbol( sym.x_type );
          }
        case 35: break;
        case 2: 
          { /* the life is short, whitespace not.*/
          }
        case 36: break;
        case 23: 
          { return symbol( sym.x_block );
          }
        case 37: break;
        case 14: 
          { return symbol( sym.x_bomb );
          }
        case 38: break;
        case 22: 
          { return symbol( sym.x_picture );
          }
        case 39: break;
        case 4: 
          { return symbol( sym.close_brace );
          }
        case 40: break;
        case 6: 
          { return symbol( sym.equal );
          }
        case 41: break;
        case 27: 
          { return symbol( sym.x_credit );
          }
        case 42: break;
        case 24: 
          { return symbol( sym.end_figure );
          }
        case 43: break;
        case 10: 
          { return symbol( sym.string_value );
          }
        case 44: break;
        case 3: 
          { return symbol( sym.open_brace );
          }
        case 45: break;
        case 7: 
          { return symbol( sym.semicolon );
          }
        case 46: break;
        case 11: 
          { return symbol( sym.path );
          }
        case 47: break;
        case 30: 
          { return symbol( sym.end_configuration );
          }
        case 48: break;
        case 26: 
          { return symbol( sym.x_enemy );
          }
        case 49: break;
        case 18: 
          { return symbol( sym.x_hero );
          }
        case 50: break;
        case 9: 
          { return symbol( sym.id );
          }
        case 51: break;
        case 32: 
          { return symbol( sym.init_configuration );
          }
        case 52: break;
        case 5: 
          { return symbol( sym.comma );
          }
        case 53: break;
        case 15: 
          { return symbol( sym.x_finish );
          }
        case 54: break;
        case 17: 
          { return symbol( sym.x_bonus );
          }
        case 55: break;
        case 19: 
          { return symbol( sym.init_figure );
          }
        case 56: break;
        case 8: 
          { return symbol( sym.int_value );
          }
        case 57: break;
        case 16: 
          { return symbol( sym.x_live );
          }
        case 58: break;
        case 1: 
          { System.out.println("Line: " + (yyline+1) + " Column: " + (yycolumn+1) + " - Lexical error in: " + yytext());
          }
        case 59: break;
        case 29: 
          { return symbol( sym.init_background );
          }
        case 60: break;
        case 20: 
          { return symbol( sym.init_design );
          }
        case 61: break;
        case 12: 
          { return symbol( sym.x_weapon );
          }
        case 62: break;
        case 31: 
          { return symbol( sym.x_description );
          }
        case 63: break;
        case 28: 
          { return symbol( sym.x_destroy );
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
