/* The following code was generated by JFlex 1.4.3 on 4/5/15 4:11 PM */

package net.project.lexer.configuration;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;
import net.project.parser.configuration.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/5/15 4:11 PM from the specification file
 * <tt>configuration.jflex</tt>
 */
public class ConfigurationLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\1\0\1\5\23\0\1\5\1\0\1\4\11\0"+
    "\1\10\1\33\1\0\1\3\12\45\1\0\1\12\1\2\1\11\1\1"+
    "\2\0\32\42\4\0\1\43\1\0\1\23\1\25\1\13\1\27\1\30"+
    "\1\16\1\20\1\36\1\17\1\42\1\26\1\40\1\34\1\15\1\14"+
    "\1\35\1\41\1\22\1\31\1\24\1\21\1\37\1\42\1\32\2\42"+
    "\1\6\1\0\1\7\u05e2\0\12\44\206\0\12\44\306\0\12\44\u019c\0"+
    "\12\44\166\0\12\44\166\0\12\44\166\0\12\44\166\0\12\44\166\0"+
    "\12\44\166\0\12\44\166\0\12\44\166\0\12\44\340\0\12\44\166\0"+
    "\12\44\106\0\12\44\u0116\0\12\44\106\0\12\44\u0746\0\12\44\46\0"+
    "\12\44\u012c\0\12\44\200\0\12\44\246\0\12\44\6\0\12\44\266\0"+
    "\12\44\126\0\12\44\206\0\12\44\6\0\12\44\u89c6\0\12\44\u02a6\0"+
    "\12\44\46\0\12\44\306\0\12\44\166\0\12\44\u0196\0\12\44\u5316\0"+
    "\12\44\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\1\10\6\0\1\11\11\0\1\12\77\0\1\13"+
    "\1\14\6\0\1\15\1\0\1\16\13\0\1\17\1\20"+
    "\4\0\1\21\5\0\1\22\1\0\1\23\1\0\1\24"+
    "\1\25\1\26\4\0\1\27\1\0\1\30\5\0\1\31"+
    "\4\0\1\32\1\0\1\33\10\0\1\34\2\0\1\35"+
    "\1\0\1\36\3\0\1\37\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\46\0\46\0\46"+
    "\0\46\0\46\0\230\0\276\0\344\0\u010a\0\u0130\0\u0156"+
    "\0\u017c\0\u01a2\0\u01c8\0\230\0\u01ee\0\u0214\0\u023a\0\u0260"+
    "\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\46\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca"+
    "\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa"+
    "\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a"+
    "\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a"+
    "\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a"+
    "\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba"+
    "\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\46\0\46\0\u0c9e"+
    "\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\46\0\u0d82\0\46"+
    "\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0efe\0\u0f24\0\46\0\46\0\u0f4a\0\u0f70\0\u0f96"+
    "\0\u0fbc\0\46\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u107a\0\46"+
    "\0\u10a0\0\46\0\u10c6\0\46\0\46\0\46\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\46\0\u1184\0\46\0\u11aa\0\u11d0\0\u11f6"+
    "\0\u121c\0\u1242\0\46\0\u1268\0\u128e\0\u12b4\0\u12da\0\46"+
    "\0\u1300\0\46\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4"+
    "\0\u140a\0\u1430\0\46\0\u1456\0\u147c\0\46\0\u14a2\0\46"+
    "\0\u14c8\0\u14ee\0\u1514\0\46\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\17\13\1\14\1\2\7\13\1\2\2\15"+
    "\51\0\1\16\7\0\1\17\2\0\1\20\6\0\1\21"+
    "\1\0\1\22\16\0\4\23\1\0\41\23\13\0\20\24"+
    "\1\0\10\24\1\0\1\24\13\0\20\24\1\25\10\24"+
    "\1\0\1\24\44\0\2\15\13\0\1\26\2\0\1\27"+
    "\6\0\1\30\1\0\1\31\32\0\1\32\50\0\1\33"+
    "\51\0\1\34\52\0\1\35\15\0\4\23\1\36\41\23"+
    "\13\0\1\37\1\0\1\40\1\0\1\41\3\0\1\42"+
    "\1\43\1\44\1\0\1\45\1\46\3\0\1\47\1\0"+
    "\1\50\1\51\22\0\1\52\50\0\1\53\51\0\1\54"+
    "\52\0\1\55\32\0\1\56\50\0\1\57\40\0\1\60"+
    "\63\0\1\61\36\0\1\62\37\0\1\63\65\0\1\64"+
    "\33\0\1\65\42\0\1\66\42\0\1\67\23\0\1\70"+
    "\35\0\1\71\32\0\1\72\60\0\1\73\45\0\1\74"+
    "\34\0\1\75\43\0\1\76\50\0\1\77\40\0\1\100"+
    "\63\0\1\101\32\0\1\102\50\0\1\103\52\0\1\104"+
    "\36\0\1\105\56\0\1\106\51\0\1\107\34\0\1\110"+
    "\56\0\1\111\46\0\1\112\25\0\1\113\16\0\1\114"+
    "\25\0\1\115\62\0\1\116\44\0\1\117\41\0\1\120"+
    "\43\0\1\121\52\0\1\122\34\0\1\123\50\0\1\124"+
    "\52\0\1\125\36\0\1\126\45\0\1\127\50\0\1\130"+
    "\43\0\1\131\45\0\1\132\54\0\1\133\43\0\1\134"+
    "\40\0\1\135\50\0\1\136\36\0\1\137\52\0\1\140"+
    "\51\0\1\141\61\0\1\142\17\0\1\143\10\0\1\144"+
    "\55\0\1\145\34\0\1\146\36\0\1\147\54\0\1\150"+
    "\41\0\1\151\50\0\1\152\43\0\1\153\45\0\1\154"+
    "\45\0\1\155\55\0\1\156\37\0\1\157\40\0\1\160"+
    "\47\0\1\161\50\0\1\162\53\0\1\163\46\0\1\164"+
    "\37\0\1\165\43\0\1\166\46\0\1\167\45\0\1\170"+
    "\42\0\1\171\56\0\1\172\35\0\1\173\55\0\1\174"+
    "\37\0\1\175\40\0\1\176\51\0\1\177\25\0\1\200"+
    "\60\0\1\201\32\0\1\202\70\0\1\203\51\0\1\204"+
    "\32\0\1\205\60\0\1\206\34\0\1\207\47\0\1\210"+
    "\44\0\1\211\46\0\1\212\25\0\1\213\60\0\1\214"+
    "\32\0\1\215\66\0\1\216\44\0\1\217\40\0\1\220"+
    "\66\0\1\221\27\0\1\222\42\0\1\223\53\0\1\224"+
    "\44\0\1\225\47\0\1\226\37\0\1\227\61\0\1\230"+
    "\27\0\1\231\54\0\1\232\46\0\1\233\37\0\1\234"+
    "\54\0\1\235\50\0\1\236\35\0\1\237\52\0\1\240"+
    "\50\0\1\241\35\0\1\242\27\0\1\243\60\0\1\244"+
    "\50\0\1\245\27\0\1\246\60\0\1\247\46\0\1\250"+
    "\44\0\1\251\46\0\1\252\45\0\1\253\31\0\1\254"+
    "\45\0\1\255\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5434];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\6\11\3\1\6\0\1\1\11\0"+
    "\1\11\77\0\2\11\6\0\1\11\1\0\1\11\13\0"+
    "\2\11\4\0\1\11\5\0\1\11\1\0\1\11\1\0"+
    "\3\11\4\0\1\11\1\0\1\11\5\0\1\11\4\0"+
    "\1\11\1\0\1\11\10\0\1\11\2\0\1\11\1\0"+
    "\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    public boolean hasErrors () {
        return errors.size() > 0;
    }

    public boolean hasSymbols() {
        return symbols.size() > 0;
    }

    public ArrayList<HashMap<String, String>> errors = new ArrayList<>();
    public ArrayList<HashMap<String, String>> symbols = new ArrayList<>();

    private Symbol symbol( int type, String typeName, String scope ) {
        addSymbol( yytext(), typeName, scope );
        return new Symbol( type, yyline, yycolumn );
    }

    private Symbol symbol( int type, String value, String typeName, String scope ) {
        addSymbol( value, typeName, scope );
        return new Symbol( type, yyline, yycolumn, value );
    }

    private void addSymbol(String value, String typeName, String scope ){
        HashMap<String, String> s = new HashMap<>();
        s.put("text", value);
        s.put("type", typeName);
        s.put("scope", scope);
        s.put("column", Integer.toString(yycolumn));
        s.put("line", Integer.toString(yyline));
        //System.out.println("text: " + value);
        symbols.add(s);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ConfigurationLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ConfigurationLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol( sym.end_design, "main tags", "configuration tag" );
          }
        case 33: break;
        case 2: 
          { /* the life is short, whitespace not.*/
          }
        case 34: break;
        case 11: 
          { return symbol( sym.x_weapon, "attribute value", "design tag" );
          }
        case 35: break;
        case 26: 
          { return symbol( sym.x_credit, "attribute value", "design tag" );
          }
        case 36: break;
        case 8: 
          { return symbol( sym.int_value, yytext(), "integer", "attribute value" );
          }
        case 37: break;
        case 21: 
          { return symbol( sym.x_picture, "attribute name", "objects" );
          }
        case 38: break;
        case 18: 
          { return symbol( sym.init_figure, "main tags", "configuration tag" );
          }
        case 39: break;
        case 27: 
          { return symbol( sym.x_destroy, "attribute name", "figure and design tags" );
          }
        case 40: break;
        case 25: 
          { return symbol( sym.x_enemy, "attribute name", "figure tag" );
          }
        case 41: break;
        case 32: 
          { return symbol( sym.end_configuration, "main tags", "root" );
          }
        case 42: break;
        case 22: 
          { return symbol( sym.x_block, "attribute value", "design tag" );
          }
        case 43: break;
        case 23: 
          { return symbol( sym.end_figure, "main tags", "configuration tag" );
          }
        case 44: break;
        case 12: 
          { return symbol( sym.x_type, "attribute name", "objects" );
          }
        case 45: break;
        case 10: 
          { return symbol( sym.string_value, yytext(), "string | path", "attribute value" );
          }
        case 46: break;
        case 16: 
          { return symbol( sym.x_bomb, "attribute value", "design tag" );
          }
        case 47: break;
        case 13: 
          { return symbol( sym.x_finish, "attribute value", "design tag" );
          }
        case 48: break;
        case 30: 
          { return symbol( sym.x_description, "attribute name", "figure tag" );
          }
        case 49: break;
        case 9: 
          { return symbol( sym.id, yytext(), "id", "attribute value" );
          }
        case 50: break;
        case 15: 
          { return symbol( sym.x_bonus, "attribute value", "design tag" );
          }
        case 51: break;
        case 3: 
          { return symbol( sym.open_brace, "blocks", "background, figure and design tags" );
          }
        case 52: break;
        case 14: 
          { return symbol( sym.x_live, "attribute name", "figure tag" );
          }
        case 53: break;
        case 6: 
          { return symbol( sym.equal, "assignation", "atribute assignation" );
          }
        case 54: break;
        case 1: 
          { System.out.println("Line: " + (yyline+1) + " Column: " + (yycolumn+1) + " - Lexical error in: " + yytext());
    HashMap<String, String> error = new HashMap<>();
    error.put("line", Integer.toString(yyline + 1));
    error.put("column", Integer.toString(yycolumn +1));
    error.put("text", yytext());
    error.put("number", Integer.toString(errors.size() + 1));
    errors.add( error );
          }
        case 55: break;
        case 20: 
          { return symbol( sym.x_name, "attribute name", "objects" );
          }
        case 56: break;
        case 7: 
          { return symbol( sym.semicolon, "blocks", "attributes separation" );
          }
        case 57: break;
        case 19: 
          { return symbol( sym.init_design, "main tags", "configuration tag" );
          }
        case 58: break;
        case 4: 
          { return symbol( sym.close_brace, "blocks", "background, figure an design tags" );
          }
        case 59: break;
        case 28: 
          { return symbol( sym.init_background, "main tags", "configuration tag" );
          }
        case 60: break;
        case 29: 
          { return symbol( sym.end_background, "main tags", "configuration tag" );
          }
        case 61: break;
        case 31: 
          { return symbol( sym.init_configuration, "main tags", "root" );
          }
        case 62: break;
        case 5: 
          { return symbol( sym.comma, "blocks", "objects separation" );
          }
        case 63: break;
        case 17: 
          { return symbol( sym.x_hero, "attribute name", "figure tag" );
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
