/* The following code was generated by JFlex 1.4.3 on 4/3/15 10:20 PM */

package net.project.lexer.configuration;

import java_cup.runtime.Symbol;
import net.project.parser.configuration.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/3/15 10:20 PM from the specification file
 * <tt>configuration.jflex</tt>
 */
public class ConfigurationLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\5\1\0\1\5\23\0\1\5\1\0\1\4\11\0"+
    "\1\10\1\33\1\0\1\3\12\74\1\0\1\12\1\2\1\11\1\1"+
    "\2\0\1\23\1\25\1\13\1\27\1\30\1\16\1\20\1\36\1\17"+
    "\1\42\1\26\1\40\1\34\1\15\1\14\1\35\1\41\1\22\1\31"+
    "\1\24\1\21\1\37\1\42\1\32\2\42\4\0\1\43\1\0\1\54"+
    "\1\56\1\44\1\60\1\61\1\47\1\51\1\66\1\50\1\72\1\57"+
    "\1\70\1\64\1\46\1\45\1\65\1\71\1\53\1\62\1\55\1\52"+
    "\1\67\1\72\1\63\2\72\1\6\1\0\1\7\u05e2\0\12\73\206\0"+
    "\12\73\306\0\12\73\u019c\0\12\73\166\0\12\73\166\0\12\73\166\0"+
    "\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0\12\73\166\0"+
    "\12\73\340\0\12\73\166\0\12\73\106\0\12\73\u0116\0\12\73\106\0"+
    "\12\73\u0746\0\12\73\46\0\12\73\u012c\0\12\73\200\0\12\73\246\0"+
    "\12\73\6\0\12\73\266\0\12\73\126\0\12\73\206\0\12\73\6\0"+
    "\12\73\u89c6\0\12\73\u02a6\0\12\73\46\0\12\73\306\0\12\73\166\0"+
    "\12\73\u0196\0\12\73\u5316\0\12\73\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\1\10\7\0\1\11\11\0\1\12\1\0\1\12"+
    "\23\0\1\13\56\0\1\14\1\15\1\0\1\16\4\0"+
    "\1\17\1\0\1\20\13\0\1\21\4\0\1\22\5\0"+
    "\1\23\1\0\1\24\1\0\1\25\1\26\1\27\4\0"+
    "\1\30\1\0\1\31\5\0\1\32\4\0\1\33\1\0"+
    "\1\34\10\0\1\35\2\0\1\36\1\0\1\37\2\0"+
    "\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\364\0\u0131\0\u016e\0\u01ab\0\u01e8\0\u0225"+
    "\0\u0262\0\u029f\0\u02dc\0\u0319\0\364\0\u0356\0\u0393\0\u03d0"+
    "\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\75\0\u057b"+
    "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u05b8\0\u05b8\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\75\0\75\0\u1535\0\75\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\75\0\u1666\0\75\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\75\0\u1942\0\u197f\0\u19bc\0\u19f9\0\75\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\75\0\u1b67\0\75\0\u1ba4"+
    "\0\75\0\75\0\75\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\75"+
    "\0\u1cd5\0\75\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\75"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\75\0\u1f37\0\75\0\u1f74"+
    "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\75"+
    "\0\u215c\0\u2199\0\75\0\u21d6\0\75\0\u2213\0\u2250\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\17\13\1\14\1\2\7\13\1\2\17\13"+
    "\1\14\7\13\2\15\100\0\1\16\7\0\1\17\2\0"+
    "\1\20\6\0\1\21\1\0\1\22\14\0\1\17\2\0"+
    "\1\20\6\0\1\21\1\0\1\22\14\0\3\23\1\24"+
    "\1\0\70\23\43\0\30\25\1\0\1\25\33\0\1\26"+
    "\7\0\30\25\1\0\1\25\73\0\2\15\13\0\1\27"+
    "\2\0\1\30\6\0\1\31\1\0\1\32\14\0\1\27"+
    "\2\0\1\30\6\0\1\31\1\0\1\32\30\0\1\33"+
    "\30\0\1\33\46\0\1\34\30\0\1\34\47\0\1\35"+
    "\30\0\1\35\50\0\1\36\30\0\1\36\13\0\4\23"+
    "\1\37\70\23\3\40\1\23\1\41\70\40\13\0\1\42"+
    "\1\0\1\43\1\0\1\44\3\0\1\45\1\46\1\47"+
    "\1\0\1\50\1\51\3\0\1\52\1\0\1\53\1\54"+
    "\4\0\1\42\1\0\1\43\1\0\1\44\3\0\1\45"+
    "\1\46\1\47\1\0\1\50\1\51\2\0\1\52\1\0"+
    "\1\53\1\54\21\0\1\55\30\0\1\55\46\0\1\56"+
    "\30\0\1\56\47\0\1\57\30\0\1\57\50\0\1\60"+
    "\30\0\1\60\30\0\1\61\30\0\1\61\46\0\1\62"+
    "\30\0\1\62\36\0\1\63\30\0\1\63\61\0\1\64"+
    "\30\0\1\64\12\0\3\40\1\24\1\65\70\40\3\66"+
    "\1\67\1\65\70\66\22\0\1\70\30\0\1\70\35\0"+
    "\1\71\30\0\1\71\63\0\1\72\27\0\1\72\32\0"+
    "\1\73\30\0\1\73\40\0\1\74\30\0\1\74\40\0"+
    "\1\75\23\0\1\76\4\0\1\75\22\0\1\76\34\0"+
    "\1\77\30\0\1\77\30\0\1\100\30\0\1\100\56\0"+
    "\1\101\30\0\1\101\43\0\1\102\30\0\1\102\32\0"+
    "\1\103\30\0\1\103\41\0\1\104\30\0\1\104\46\0"+
    "\1\105\30\0\1\105\36\0\1\106\30\0\1\106\61\0"+
    "\1\107\30\0\1\107\30\0\1\110\30\0\1\110\46\0"+
    "\1\111\30\0\1\111\50\0\1\112\30\0\1\112\34\0"+
    "\1\113\30\0\1\113\24\0\3\66\1\0\71\66\30\0"+
    "\1\114\30\0\1\114\47\0\1\115\27\0\1\115\33\0"+
    "\1\116\30\0\1\116\54\0\1\117\27\0\1\117\45\0"+
    "\1\120\27\0\1\120\24\0\1\121\16\0\1\122\11\0"+
    "\1\121\15\0\1\122\24\0\1\123\30\0\1\123\60\0"+
    "\1\124\30\0\1\124\42\0\1\125\30\0\1\125\37\0"+
    "\1\126\30\0\1\126\41\0\1\127\30\0\1\127\50\0"+
    "\1\130\30\0\1\130\32\0\1\131\30\0\1\131\46\0"+
    "\1\132\30\0\1\132\50\0\1\133\30\0\1\133\34\0"+
    "\1\134\30\0\1\134\43\0\1\135\30\0\1\135\46\0"+
    "\1\136\30\0\1\136\41\0\1\137\30\0\1\137\43\0"+
    "\1\140\30\0\1\140\52\0\1\141\30\0\1\141\41\0"+
    "\1\142\30\0\1\142\36\0\1\143\30\0\1\143\46\0"+
    "\1\144\30\0\1\144\34\0\1\145\30\0\1\145\50\0"+
    "\1\146\30\0\1\146\47\0\1\147\30\0\1\147\57\0"+
    "\1\150\27\0\1\150\16\0\1\151\10\0\1\152\17\0"+
    "\1\151\10\0\1\152\53\0\1\153\27\0\1\153\33\0"+
    "\1\154\30\0\1\154\34\0\1\155\30\0\1\155\52\0"+
    "\1\156\30\0\1\156\37\0\1\157\30\0\1\157\46\0"+
    "\1\160\30\0\1\160\41\0\1\161\30\0\1\161\43\0"+
    "\1\162\30\0\1\162\43\0\1\163\30\0\1\163\53\0"+
    "\1\164\30\0\1\164\35\0\1\165\30\0\1\165\36\0"+
    "\1\166\30\0\1\166\45\0\1\167\30\0\1\167\46\0"+
    "\1\170\30\0\1\170\51\0\1\171\30\0\1\171\44\0"+
    "\1\172\30\0\1\172\33\0\1\173\30\0\1\173\44\0"+
    "\1\174\30\0\1\174\43\0\1\175\30\0\1\175\40\0"+
    "\1\176\30\0\1\176\54\0\1\177\30\0\1\177\33\0"+
    "\1\200\30\0\1\200\53\0\1\201\30\0\1\201\35\0"+
    "\1\202\30\0\1\202\36\0\1\203\30\0\1\203\47\0"+
    "\1\204\30\0\1\204\23\0\1\205\107\0\1\206\30\0"+
    "\1\206\30\0\1\207\117\0\1\210\30\0\1\210\47\0"+
    "\1\211\30\0\1\211\30\0\1\212\30\0\1\212\56\0"+
    "\1\213\30\0\1\213\32\0\1\214\30\0\1\214\45\0"+
    "\1\215\30\0\1\215\42\0\1\216\30\0\1\216\44\0"+
    "\1\217\30\0\1\217\23\0\1\220\107\0\1\221\30\0"+
    "\1\221\30\0\1\222\115\0\1\223\30\0\1\223\42\0"+
    "\1\224\30\0\1\224\36\0\1\225\30\0\1\225\64\0"+
    "\1\226\27\0\1\226\26\0\1\227\30\0\1\227\40\0"+
    "\1\230\30\0\1\230\51\0\1\231\30\0\1\231\42\0"+
    "\1\232\30\0\1\232\45\0\1\233\30\0\1\233\35\0"+
    "\1\234\30\0\1\234\57\0\1\235\30\0\1\235\25\0"+
    "\1\236\30\0\1\236\52\0\1\237\30\0\1\237\44\0"+
    "\1\240\30\0\1\240\35\0\1\241\30\0\1\241\52\0"+
    "\1\242\30\0\1\242\46\0\1\243\30\0\1\243\33\0"+
    "\1\244\30\0\1\244\50\0\1\245\30\0\1\245\46\0"+
    "\1\246\30\0\1\246\33\0\1\247\30\0\1\247\25\0"+
    "\1\250\107\0\1\251\30\0\1\251\46\0\1\252\30\0"+
    "\1\252\25\0\1\253\107\0\1\254\30\0\1\254\44\0"+
    "\1\255\30\0\1\255\42\0\1\256\30\0\1\256\44\0"+
    "\1\257\30\0\1\257\43\0\1\246\30\0\1\246\27\0"+
    "\1\260\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8845];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\6\11\3\1\7\0\1\1\11\0"+
    "\1\11\1\0\1\1\23\0\1\1\56\0\2\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\11\13\0\1\11\4\0"+
    "\1\11\5\0\1\11\1\0\1\11\1\0\3\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\1\11\1\0"+
    "\1\11\10\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol( int type ) {
        return new Symbol( type, yyline, yycolumn );
    }

    private Symbol symbol( int type, Object value ) {
        return new Symbol( type, yyline, yycolumn, value );
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ConfigurationLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ConfigurationLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return symbol( sym.end_design );
          }
        case 33: break;
        case 21: 
          { return symbol( sym.x_name );
          }
        case 34: break;
        case 13: 
          { return symbol( sym.x_type );
          }
        case 35: break;
        case 2: 
          { /* the life is short, whitespace not.*/
          }
        case 36: break;
        case 23: 
          { return symbol( sym.x_block );
          }
        case 37: break;
        case 14: 
          { return symbol( sym.x_bomb );
          }
        case 38: break;
        case 22: 
          { return symbol( sym.x_picture );
          }
        case 39: break;
        case 4: 
          { return symbol( sym.close_brace );
          }
        case 40: break;
        case 6: 
          { return symbol( sym.equal );
          }
        case 41: break;
        case 27: 
          { return symbol( sym.x_credit );
          }
        case 42: break;
        case 24: 
          { return symbol( sym.end_figure );
          }
        case 43: break;
        case 10: 
          { return symbol( sym.string_value );
          }
        case 44: break;
        case 3: 
          { return symbol( sym.open_brace );
          }
        case 45: break;
        case 7: 
          { return symbol( sym.semicolon );
          }
        case 46: break;
        case 11: 
          { return symbol( sym.path );
          }
        case 47: break;
        case 30: 
          { return symbol( sym.end_configuration );
          }
        case 48: break;
        case 26: 
          { return symbol( sym.x_enemy );
          }
        case 49: break;
        case 18: 
          { return symbol( sym.x_hero );
          }
        case 50: break;
        case 9: 
          { return symbol( sym.id );
          }
        case 51: break;
        case 32: 
          { return symbol( sym.init_configuration );
          }
        case 52: break;
        case 5: 
          { return symbol( sym.comma );
          }
        case 53: break;
        case 15: 
          { return symbol( sym.x_finish );
          }
        case 54: break;
        case 17: 
          { return symbol( sym.x_bonus );
          }
        case 55: break;
        case 19: 
          { return symbol( sym.init_figure );
          }
        case 56: break;
        case 8: 
          { return symbol( sym.int_value );
          }
        case 57: break;
        case 16: 
          { return symbol( sym.x_live );
          }
        case 58: break;
        case 1: 
          { System.out.println("Line: " + (yyline+1) + " Column: " + (yycolumn+1) + " - Lexical error in: " + yytext());
          }
        case 59: break;
        case 29: 
          { return symbol( sym.init_background );
          }
        case 60: break;
        case 20: 
          { return symbol( sym.init_design );
          }
        case 61: break;
        case 12: 
          { return symbol( sym.x_weapon );
          }
        case 62: break;
        case 31: 
          { return symbol( sym.x_description );
          }
        case 63: break;
        case 28: 
          { return symbol( sym.x_destroy );
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
