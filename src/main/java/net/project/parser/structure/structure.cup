package net.project.parser.structure;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;

/*
 * Inserted in ScenarioParser
 */
parser code
{:
    public boolean hasUnRecoveredSyntaxError = false;

    public String bg;
    public int width;
    public int height;

    public String initA, initB, endA, endB;

    public HashMap<String, String> hero = new HashMap<>();
    public HashMap<String, String> finish = new HashMap<>();
    public ArrayList<HashMap<String, String>> enemies = new ArrayList<>();
    public ArrayList<HashMap<String, String>> walls = new ArrayList<>();

    public ArrayList<HashMap<String, String>> weapons = new ArrayList<>();
    public ArrayList<HashMap<String, String>> bonusList = new ArrayList<>();


    public void syntax_error( Symbol currentToken ) {
        // just to avoid native syntax_error method.
    }

    public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception {
        // has an un-recovered syntax error(structure error)
        this.hasUnRecoveredSyntaxError = true;
    }

:}

/*
 * terminals?
 */

terminal String

    // main structures (tags)
    init_scenario,
    end_scenario,
    init_characters,
    end_characters,
    init_heroes,
    end_heroes,
    init_enemies,
    end_enemies,
    init_walls,
    end_walls,
    init_extras,
    end_extras,
    init_weapons,
    end_weapons,
    init_bonus,
    end_bonus,
    finish,

    // single chars
    close_parens,
    dot,
    equal,
    more_than,
    open_parens,
    semicolon,
    comma,

    // single words
    background,
    height,
    width,

    // ER
    int_value,
    id
    ;

non terminal
    START,

    SCN_ATTRS,
    SCN_ATTR,
    SCN_BACKGROUND,
    SCN_WIDTH,
    SCN_HEIGHT,

    SCN_ELEMENTS,
    SCN_ELEMENT,

    CHARACTERS,
    CHARACTERS_STR,
    CHARACTER,
    HEROES,
    HERO,
    ENEMIES,
    ENEMIES_STR,
    ENEMY,

    WALLS,
    WALLS_STR,
    WALL,
    WALL_INT_A,
    WALL_INT_B,

    EXTRAS,
    EXTRAS_STR,
    EXTRAS_ELEMENT,
    WEAPONS,
    WEAPONS_STR,
    WEAPON,
    BONUS,
    BONUS_STR,
    BONUS_ELEMENT,

    FINISH;

start with START;

/*
 * <x-escenario attrs > /elements/ </x-escenario>
 */
START::= init_scenario SCN_ATTRS more_than SCN_ELEMENTS end_scenario;

// "attr (; attr)* "
SCN_ATTRS::= SCN_ATTRS semicolon SCN_ATTR
             | SCN_ATTR;

SCN_ATTR::=  SCN_BACKGROUND
           | SCN_WIDTH
           | SCN_HEIGHT;

// "background =  [a-z][a-z0-9]+"
SCN_BACKGROUND::= background equal id:bg{:
    this.parser.bg = bg;
:};

// "ancho = [:digit:]+"
SCN_WIDTH::= width equal int_value:w{:
    this.parser.width = Integer.parseInt(w);
:};

// "alto = [:digit:]+"
SCN_HEIGHT::= height equal int_value:h{:
    this.parser.height = Integer.parseInt(h);
:};


SCN_ELEMENTS::= SCN_ELEMENTS SCN_ELEMENT
                | SCN_ELEMENT;

SCN_ELEMENT::=  CHARACTERS
                | WALLS
                | EXTRAS
                | FINISH;

// "<x-personajes> </x-personajes>"
CHARACTERS::=   init_characters CHARACTERS_STR end_characters;

CHARACTERS_STR::=   CHARACTER
                    | CHARACTERS_STR CHARACTER;

CHARACTER::=    HEROES
                | ENEMIES;

// "<x-heroes> </x-heroes>"
HEROES::= init_heroes HERO end_heroes;

// "hero_name ([:digit:], [:digit:])"
HERO::= id:name open_parens int_value:initValue comma int_value:endValue close_parens{:
    this.parser.hero.put("name", name);
    this.parser.hero.put("init", initValue);
    this.parser.hero.put("end", endValue);
:};

// "<x-enemigos> </x-enemigos>"
ENEMIES::= init_enemies ENEMIES_STR  end_enemies;

ENEMIES_STR::=  ENEMY
                | ENEMIES_STR ENEMY;

// "enemy_name([:digit:], [:digit:])"
ENEMY::= id:name open_parens int_value:initValue comma int_value:endValue close_parens{:
    HashMap<String, String> enemy = new HashMap<>();
    enemy.put("name", name);
    enemy.put("init", initValue);
    enemy.put("end", endValue);
    this.parser.enemies.add(enemy);
:};


/*
 * walls structure
 */
WALLS::= init_walls WALLS_STR end_walls;

WALLS_STR::=    WALL
                | WALLS_STR WALL;

WALL::= id:name open_parens WALL_INT_A comma WALL_INT_B close_parens{:
    HashMap<String, String> wall = new HashMap<>();
    wall.put("name", name);
    wall.put("initA", this.parser.initA);
    if( this.parser.endA != null) {
        wall.put("endA", this.parser.endA);
        this.parser.endA = null;
    }
    wall.put("initB", this.parser.initB);
    if(this.parser.endA != null) {
        wall.put("endB", this.parser.endB);
        this.parser.endB = null;
    }
    this.parser.initA = null;
    this.parser.initB = null;
:};


WALL_INT_A::=   int_value:initA{:
                    this.parser.initA = initA;
                :}
                | int_value:initA dot dot int_value:endA{:
                    this.parser.initA = initA;
                    this.parser.endA = endA;
                :};

WALL_INT_B::=   int_value:initB{:
                    this.parser.initB = initB;
                :}
                | int_value:initB dot dot int_value:endB{:
                    this.parser.initB = initB;
                    this.parser.endB = endB;
                :};

/*
 * extras structure
 */
EXTRAS::= init_extras EXTRAS_STR  end_extras;

EXTRAS_STR::=   EXTRAS_STR EXTRAS_ELEMENT
                | EXTRAS_ELEMENT;

EXTRAS_ELEMENT::=   WEAPONS
                    | BONUS;

WEAPONS::=  init_weapons WEAPONS_STR end_weapons;

WEAPONS_STR::=  WEAPONS_STR WEAPON
                | WEAPON;

WEAPON::=       id:name open_parens int_value:initValue comma int_value:endValue close_parens{:
                    HashMap<String, String> weapon = new HashMap<>();
                    weapon.put("name", name);
                    weapon.put("init", initValue);
                    weapon.put("end", endValue);
                    this.parser.weapons.add(weapon);
                :};

BONUS::=    init_bonus BONUS_STR end_bonus;

BONUS_STR::=    BONUS_STR BONUS_ELEMENT
                | BONUS_ELEMENT;

BONUS_ELEMENT::= id:name open_parens int_value:initValue comma int_value:endValue close_parens{:
                    HashMap<String, String> bonus = new HashMap<>();
                    bonus.put("name", name);
                    bonus.put("init", initValue);
                    bonus.put("end", endValue);
                    this.parser.bonusList.add(bonus);
                :};


/*
 * finish structure
 */
FINISH::= finish id:name open_parens int_value:initValue comma int_value:endValue close_parens finish{:
    this.parser.finish.put("name", name);
    this.parser.finish.put("init", initValue);
    this.parser.finish.put("end", endValue);
:};


