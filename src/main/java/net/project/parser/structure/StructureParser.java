
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 23 11:37:11 CST 2015
//----------------------------------------------------

package net.project.parser.structure;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 23 11:37:11 CST 2015
  */
public class StructureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public StructureParser() {super();}

  /** Constructor which sets the default scanner. */
  public StructureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StructureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\005\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\006\000\002\013\006\000\002\014\005\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\017\004\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\006\000\002\022\006\000\002\023\006" +
    "\000\002\024\003\000\002\024\003\000\002\025\006\000" +
    "\002\026\006\000\002\027\006\000\002\030\005\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\033" +
    "\004\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\006\000\002\036\006\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\006\000\002\041\006\000\002\042\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\004\004\001\002\000\010\006\013\010" +
    "\015\012\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\012\005\ufffb\006\ufffb\010\ufffb\012" +
    "\ufffb\001\002\000\004\015\120\001\002\000\004\005\116" +
    "\001\002\000\012\005\ufffd\006\ufffd\010\ufffd\012\ufffd\001" +
    "\002\000\004\015\074\001\002\000\012\005\ufffc\006\ufffc" +
    "\010\ufffc\012\ufffc\001\002\000\004\015\021\001\002\000" +
    "\012\005\ufffe\006\013\010\015\012\010\001\002\000\004" +
    "\005\uffff\001\002\000\004\011\071\001\002\000\016\021" +
    "\034\022\027\023\026\026\036\027\035\030\042\001\002" +
    "\000\006\011\uffee\014\023\001\002\000\004\015\021\001" +
    "\002\000\004\011\uffef\001\002\000\020\016\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000" +
    "\004\017\064\001\002\000\004\017\061\001\002\000\020" +
    "\016\uffeb\021\034\022\027\023\026\026\036\027\035\030" +
    "\042\001\002\000\004\016\057\001\002\000\020\016\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9\001" +
    "\002\000\020\016\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\001\002\000\004\017\054\001\002\000" +
    "\004\017\051\001\002\000\004\017\046\001\002\000\020" +
    "\016\uffea\021\uffea\022\uffea\023\uffea\026\uffea\027\uffea\030" +
    "\uffea\001\002\000\020\016\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\001\002\000\020\016\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\001\002" +
    "\000\004\017\043\001\002\000\004\042\044\001\002\000" +
    "\004\020\045\001\002\000\020\016\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000\004\041" +
    "\047\001\002\000\004\020\050\001\002\000\020\016\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\001" +
    "\002\000\004\041\052\001\002\000\004\020\053\001\002" +
    "\000\020\016\uffde\021\uffde\022\uffde\023\uffde\026\uffde\027" +
    "\uffde\030\uffde\001\002\000\004\037\055\001\002\000\004" +
    "\020\056\001\002\000\020\016\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\001\002\000\006\011\uffed" +
    "\014\uffed\001\002\000\004\016\uffec\001\002\000\004\040" +
    "\062\001\002\000\004\020\063\001\002\000\020\016\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\001" +
    "\002\000\006\024\066\025\065\001\002\000\004\020\uffe0" +
    "\001\002\000\004\020\uffe1\001\002\000\004\020\070\001" +
    "\002\000\020\016\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\001\002\000\012\005\ufff0\006\ufff0\010" +
    "\ufff0\012\ufff0\001\002\000\006\007\ufff8\014\114\001\002" +
    "\000\004\007\113\001\002\000\006\021\076\022\102\001" +
    "\002\000\010\016\ufff5\021\076\022\102\001\002\000\004" +
    "\017\107\001\002\000\010\016\ufff4\021\ufff4\022\ufff4\001" +
    "\002\000\010\016\ufff3\021\ufff3\022\ufff3\001\002\000\004" +
    "\016\106\001\002\000\004\017\103\001\002\000\004\040" +
    "\104\001\002\000\004\020\105\001\002\000\010\016\ufff1" +
    "\021\ufff1\022\ufff1\001\002\000\006\007\ufff7\014\ufff7\001" +
    "\002\000\004\037\110\001\002\000\004\020\111\001\002" +
    "\000\010\016\ufff2\021\ufff2\022\ufff2\001\002\000\004\016" +
    "\ufff6\001\002\000\012\005\ufffa\006\ufffa\010\ufffa\012\ufffa" +
    "\001\002\000\004\015\074\001\002\000\004\007\ufff9\001" +
    "\002\000\004\002\001\001\002\000\004\013\166\001\002" +
    "\000\014\021\133\022\126\023\125\027\134\036\127\001" +
    "\002\000\006\013\uffda\014\122\001\002\000\004\015\120" +
    "\001\002\000\004\013\uffdb\001\002\000\016\016\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\027\uffd3\036\uffd3\001\002\000\004" +
    "\017\156\001\002\000\004\017\153\001\002\000\004\017" +
    "\150\001\002\000\016\016\uffd7\021\133\022\126\023\125" +
    "\027\134\036\127\001\002\000\016\016\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\027\uffd2\036\uffd2\001\002\000\016\016\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\027\uffd5\036\uffd5\001\002\000" +
    "\004\017\144\001\002\000\004\017\141\001\002\000\016" +
    "\016\uffd4\021\uffd4\022\uffd4\023\uffd4\027\uffd4\036\uffd4\001" +
    "\002\000\016\016\uffd6\021\uffd6\022\uffd6\023\uffd6\027\uffd6" +
    "\036\uffd6\001\002\000\004\016\140\001\002\000\006\013" +
    "\uffd9\014\uffd9\001\002\000\004\041\142\001\002\000\004" +
    "\020\143\001\002\000\016\016\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\027\uffc9\036\uffc9\001\002\000\004\037\145\001\002" +
    "\000\004\020\146\001\002\000\016\016\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\027\uffd1\036\uffd1\001\002\000\004\016\uffd8" +
    "\001\002\000\004\041\151\001\002\000\004\020\152\001" +
    "\002\000\016\016\uffc8\021\uffc8\022\uffc8\023\uffc8\027\uffc8" +
    "\036\uffc8\001\002\000\004\040\154\001\002\000\004\020" +
    "\155\001\002\000\016\016\uffca\021\uffca\022\uffca\023\uffca" +
    "\027\uffca\036\uffca\001\002\000\014\031\162\032\157\033" +
    "\160\034\164\035\163\001\002\000\004\020\uffce\001\002" +
    "\000\004\020\uffcd\001\002\000\004\020\165\001\002\000" +
    "\004\020\uffcf\001\002\000\004\020\uffcb\001\002\000\004" +
    "\020\uffcc\001\002\000\016\016\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\027\uffd0\036\uffd0\001\002\000\012\005\uffdc\006\uffdc" +
    "\010\uffdc\012\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\002\004\001\001\000\014\003\010\004" +
    "\015\005\011\014\013\030\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\116\032" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\072\007\071\001\001\000\002\001\001\000\006\015" +
    "\017\016\021\001\001\000\014\003\016\004\015\005\011" +
    "\014\013\030\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\017\030\020\027\021\036\022\031\023\032" +
    "\025\040\026\037\027\024\001\001\000\002\001\001\000" +
    "\006\015\023\016\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\057\020\027\021\036\022\031\023\032\025\040\026\037" +
    "\027\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\100\011\074\012\076\013\077" +
    "\001\001\000\012\010\111\011\074\012\076\013\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\114\007\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\033\136\034\127\035\135\036\131\040\134\041\123" +
    "\042\130\001\001\000\002\001\001\000\006\031\122\032" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\033" +
    "\146\034\127\035\135\036\131\040\134\041\123\042\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StructureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StructureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StructureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public boolean hasUnRecoveredSyntaxError = false;

	public void syntax_error(Symbol cur_token) {
		// nothing to do, just to avoid native syntax_error method.
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
		// has some un-recovered syntax error(structure error)
		this.hasUnRecoveredSyntaxError = true;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$StructureParser$actions {
  private final StructureParser parser;

  /** Constructor */
  CUP$StructureParser$actions(StructureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$StructureParser$do_action(
    int                        CUP$StructureParser$act_num,
    java_cup.runtime.lr_parser CUP$StructureParser$parser,
    java.util.Stack            CUP$StructureParser$stack,
    int                        CUP$StructureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StructureParser$result;

      /* select the action based on the action number */
      switch (CUP$StructureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DG_X_CREDIT ::= x_credit equal int_value semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_CREDIT",32, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DG_X_DESTROY ::= x_destroy equal int_value semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_DESTROY",31, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DG_X_PICTURE ::= x_picture equal path semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_PICTURE",30, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DG_X_TYPE_VALUE ::= x_weapon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DG_X_TYPE_VALUE ::= x_bomb 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DG_X_TYPE_VALUE ::= x_bonus 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DG_X_TYPE_VALUE ::= x_block 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DG_X_TYPE_VALUE ::= x_finish 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DG_X_TYPE ::= x_type equal DG_X_TYPE_VALUE semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE",28, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DG_X_NAME ::= x_name equal id semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_X_NAME",27, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DG_ELEMENT ::= DG_X_CREDIT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DG_ELEMENT ::= DG_X_DESTROY 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DG_ELEMENT ::= DG_X_PICTURE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DG_ELEMENT ::= DG_X_TYPE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DG_ELEMENT ::= DG_X_NAME 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DG_ELEMENTS ::= DG_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENTS",25, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DG_ELEMENTS ::= DG_ELEMENT DG_ELEMENTS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENTS",25, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DG_OBJECT ::= open_brace DG_ELEMENTS close_brace 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_OBJECT",24, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DG_IN ::= DG_OBJECT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_IN",23, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DG_IN ::= DG_OBJECT comma DG_IN 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DG_IN",23, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DESIGN ::= init_design DG_IN end_design 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("DESIGN",22, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FG_X_DESCRIPTION ::= x_description equal string_value semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_DESCRIPTION",21, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FG_X_DESTROY ::= x_destroy equal int_value semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_DESTROY",20, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FG_X_LIVE ::= x_live equal int_value semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_LIVE",19, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FG_X_TYPE_VALUE ::= x_enemy 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_TYPE_VALUE",18, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FG_X_TYPE_VALUE ::= x_hero 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_TYPE_VALUE",18, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FG_X_TYPE ::= x_type equal FG_X_TYPE_VALUE semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_TYPE",17, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FG_X_PICTURE ::= x_picture equal path semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_PICTURE",16, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FG_X_NAME ::= x_name equal id semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_X_NAME",15, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FG_ELEMENT ::= FG_X_DESCRIPTION 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FG_ELEMENT ::= FG_X_DESTROY 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FG_ELEMENT ::= FG_X_LIVE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FG_ELEMENT ::= FG_X_TYPE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FG_ELEMENT ::= FG_X_PICTURE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FG_ELEMENT ::= FG_X_NAME 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FG_ELEMENTS ::= FG_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENTS",13, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FG_ELEMENTS ::= FG_ELEMENT FG_ELEMENTS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENTS",13, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FG_OBJECT ::= open_brace FG_ELEMENTS close_brace 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_OBJECT",12, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FG_IN ::= FG_OBJECT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_IN",11, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FG_IN ::= FG_OBJECT comma FG_IN 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FG_IN",11, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FIGURE ::= init_figure FG_IN end_figure 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FIGURE",10, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BG_X_PICTURE ::= x_picture equal path semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_X_PICTURE",9, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BG_X_NAME ::= x_name equal id semicolon 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_X_NAME",8, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BG_ELEMENT ::= BG_X_PICTURE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BG_ELEMENT ::= BG_X_NAME 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BG_ELEMENTS ::= BG_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BG_ELEMENTS ::= BG_ELEMENT BG_ELEMENTS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BG_OBJECT ::= open_brace BG_ELEMENTS close_brace 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_OBJECT",5, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BG_IN ::= BG_OBJECT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_IN",4, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BG_IN ::= BG_OBJECT comma BG_IN 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BG_IN",4, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BACKGROUND ::= init_background BG_IN end_background 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BACKGROUND",3, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENT ::= DESIGN 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ELEMENT",2, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENT ::= FIGURE 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ELEMENT",2, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ELEMENT ::= BACKGROUND 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ELEMENT",2, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ELEMENTS ::= ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",1, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ELEMENTS ::= ELEMENT ELEMENTS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",1, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).value;
		RESULT = start_val;
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StructureParser$parser.done_parsing();
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // START ::= init_configuration ELEMENTS end_configuration 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

