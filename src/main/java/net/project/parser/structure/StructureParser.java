
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 05 19:43:08 CST 2015
//----------------------------------------------------

package net.project.parser.structure;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 05 19:43:08 CST 2015
  */
public class StructureParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public StructureParser() {super();}

  /** Constructor which sets the default scanner. */
  public StructureParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StructureParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\005\000" +
    "\002\007\005\000\002\010\004\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\013\003\000\002\013\004" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\016\010\000\002\017\005\000\002\020\003\000\002" +
    "\020\004\000\002\021\010\000\002\022\005\000\002\023" +
    "\003\000\002\023\004\000\002\024\010\000\002\025\003" +
    "\000\002\025\006\000\002\026\003\000\002\026\006\000" +
    "\002\027\005\000\002\030\004\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\005\000\002\033" +
    "\004\000\002\033\003\000\002\034\010\000\002\035\005" +
    "\000\002\036\004\000\002\036\003\000\002\037\010\000" +
    "\002\040\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\004\004\001\002\000\010\034\011\035" +
    "\007\036\013\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\027\161\001\002\000\006\030" +
    "\ufffd\032\ufffd\001\002\000\004\027\157\001\002\000\006" +
    "\030\021\032\022\001\002\000\004\027\017\001\002\000" +
    "\006\030\ufffb\032\ufffb\001\002\000\006\030\ufffc\032\ufffc" +
    "\001\002\000\006\030\ufffe\032\ufffe\001\002\000\004\037" +
    "\020\001\002\000\006\030\ufff9\032\ufff9\001\002\000\012" +
    "\006\030\014\026\016\025\024\034\001\002\000\010\034" +
    "\011\035\007\036\013\001\002\000\006\030\uffff\032\uffff" +
    "\001\002\000\014\005\ufff3\006\ufff3\014\ufff3\016\ufff3\024" +
    "\ufff3\001\002\000\006\020\127\022\125\001\002\000\004" +
    "\040\103\001\002\000\014\005\ufff6\006\ufff6\014\ufff6\016" +
    "\ufff6\024\ufff6\001\002\000\006\010\047\012\050\001\002" +
    "\000\014\005\ufff5\006\ufff5\014\ufff5\016\ufff5\024\ufff5\001" +
    "\002\000\014\005\ufff2\006\ufff2\014\ufff2\016\ufff2\024\ufff2" +
    "\001\002\000\014\005\046\006\030\014\026\016\025\024" +
    "\034\001\002\000\004\040\036\001\002\000\014\005\ufff4" +
    "\006\ufff4\014\ufff4\016\ufff4\024\ufff4\001\002\000\004\031" +
    "\037\001\002\000\004\037\040\001\002\000\004\033\041" +
    "\001\002\000\004\037\042\001\002\000\004\025\043\001" +
    "\002\000\004\024\044\001\002\000\014\005\uffd1\006\uffd1" +
    "\014\uffd1\016\uffd1\024\uffd1\001\002\000\014\005\ufff7\006" +
    "\ufff7\014\ufff7\016\ufff7\024\ufff7\001\002\000\004\002\000" +
    "\001\002\000\004\040\071\001\002\000\004\040\061\001" +
    "\002\000\010\007\ufff0\010\ufff0\012\ufff0\001\002\000\010" +
    "\007\055\010\047\012\050\001\002\000\010\007\uffed\010" +
    "\uffed\012\uffed\001\002\000\010\007\uffee\010\uffee\012\uffee" +
    "\001\002\000\014\005\ufff1\006\ufff1\014\ufff1\016\ufff1\024" +
    "\ufff1\001\002\000\010\007\uffef\010\uffef\012\uffef\001\002" +
    "\000\006\013\uffe9\040\uffe9\001\002\000\006\013\070\040" +
    "\061\001\002\000\004\031\062\001\002\000\004\037\063" +
    "\001\002\000\004\033\064\001\002\000\004\037\065\001" +
    "\002\000\004\025\066\001\002\000\006\013\uffe7\040\uffe7" +
    "\001\002\000\006\013\uffe8\040\uffe8\001\002\000\010\007" +
    "\uffea\010\uffea\012\uffea\001\002\000\004\031\074\001\002" +
    "\000\004\011\073\001\002\000\010\007\uffec\010\uffec\012" +
    "\uffec\001\002\000\004\037\075\001\002\000\004\033\076" +
    "\001\002\000\004\037\077\001\002\000\004\025\100\001" +
    "\002\000\004\011\uffeb\001\002\000\006\015\uffe5\040\uffe5" +
    "\001\002\000\006\015\121\040\103\001\002\000\004\031" +
    "\104\001\002\000\004\037\106\001\002\000\004\033\112" +
    "\001\002\000\006\026\107\033\uffe2\001\002\000\004\026" +
    "\110\001\002\000\004\037\111\001\002\000\004\033\uffe1" +
    "\001\002\000\004\037\114\001\002\000\004\025\120\001" +
    "\002\000\006\025\uffe0\026\115\001\002\000\004\026\116" +
    "\001\002\000\004\037\117\001\002\000\004\025\uffdf\001" +
    "\002\000\006\015\uffe3\040\uffe3\001\002\000\014\005\uffe6" +
    "\006\uffe6\014\uffe6\016\uffe6\024\uffe6\001\002\000\006\015" +
    "\uffe4\040\uffe4\001\002\000\010\017\uffdc\020\uffdc\022\uffdc" +
    "\001\002\000\010\017\uffdb\020\uffdb\022\uffdb\001\002\000" +
    "\004\040\147\001\002\000\010\017\uffda\020\uffda\022\uffda" +
    "\001\002\000\004\040\135\001\002\000\010\017\131\020" +
    "\127\022\125\001\002\000\014\005\uffde\006\uffde\014\uffde" +
    "\016\uffde\024\uffde\001\002\000\010\017\uffdd\020\uffdd\022" +
    "\uffdd\001\002\000\006\021\uffd7\040\uffd7\001\002\000\006" +
    "\021\143\040\135\001\002\000\004\031\136\001\002\000" +
    "\004\037\137\001\002\000\004\033\140\001\002\000\004" +
    "\037\141\001\002\000\004\025\142\001\002\000\006\021" +
    "\uffd6\040\uffd6\001\002\000\010\017\uffd9\020\uffd9\022\uffd9" +
    "\001\002\000\006\021\uffd8\040\uffd8\001\002\000\006\023" +
    "\uffd3\040\uffd3\001\002\000\006\023\155\040\147\001\002" +
    "\000\004\031\150\001\002\000\004\037\151\001\002\000" +
    "\004\033\152\001\002\000\004\037\153\001\002\000\004" +
    "\025\154\001\002\000\006\023\uffd2\040\uffd2\001\002\000" +
    "\010\017\uffd5\020\uffd5\022\uffd5\001\002\000\006\023\uffd4" +
    "\040\uffd4\001\002\000\004\040\160\001\002\000\006\030" +
    "\ufffa\032\ufffa\001\002\000\004\037\162\001\002\000\006" +
    "\030\ufff8\032\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\002\004\001\001\000\014\003\011\004" +
    "\015\005\007\006\014\007\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\032\011\026\012\030" +
    "\022\034\027\023\040\031\001\001\000\012\004\022\005" +
    "\007\006\014\007\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\127\031\122\032\123\035\125\001" +
    "\001\000\006\023\101\024\100\001\001\000\002\001\001" +
    "\000\012\013\051\014\050\015\053\017\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\044\012\030" +
    "\022\034\027\023\040\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\071\001\001\000\006\020\057\021\056\001" +
    "\001\000\002\001\001\000\010\014\055\015\053\017\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\121\001\001\000\002" +
    "\001\001\000\004\025\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\145" +
    "\037\144\001\001\000\002\001\001\000\006\033\133\034" +
    "\132\001\001\000\010\031\131\032\123\035\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StructureParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StructureParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StructureParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean hasUnRecoveredSyntaxError = false;

    public String bg;
    public int width;
    public int height;

    public String initA, initB, endA, endB;

    public HashMap<String, String> hero = new HashMap<>();
    public HashMap<String, String> finish = new HashMap<>();
    public ArrayList<HashMap<String, String>> enemies = new ArrayList<>();
    public ArrayList<HashMap<String, String>> walls = new ArrayList<>();

    public ArrayList<HashMap<String, String>> weapons = new ArrayList<>();
    public ArrayList<HashMap<String, String>> bonusList = new ArrayList<>();


    public void syntax_error( Symbol currentToken ) {
        // just to avoid native syntax_error method.
    }

    public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception {
        // has an un-recovered syntax error(structure error)
        this.hasUnRecoveredSyntaxError = true;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$StructureParser$actions {
  private final StructureParser parser;

  /** Constructor */
  CUP$StructureParser$actions(StructureParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$StructureParser$do_action(
    int                        CUP$StructureParser$act_num,
    java_cup.runtime.lr_parser CUP$StructureParser$parser,
    java.util.Stack            CUP$StructureParser$stack,
    int                        CUP$StructureParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StructureParser$result;

      /* select the action based on the action number */
      switch (CUP$StructureParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FINISH ::= finish id open_parens int_value comma int_value close_parens finish 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-6)).value;
		int initValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-4)).left;
		int initValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-4)).right;
		String initValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-4)).value;
		int endValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)).left;
		int endValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)).right;
		String endValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)).value;
		
    this.parser.finish.put("name", name);
    this.parser.finish.put("init", initValue);
    this.parser.finish.put("end", endValue);

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("FINISH",30, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-7)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BONUS_ELEMENT ::= id open_parens int_value comma int_value close_parens 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).value;
		int initValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).left;
		int initValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).right;
		String initValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).value;
		int endValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).left;
		int endValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).right;
		String endValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).value;
		
                    HashMap<String, String> bonus = new HashMap<>();
                    bonus.put("name", name);
                    bonus.put("init", initValue);
                    bonus.put("end", endValue);
                    this.parser.bonusList.add(bonus);
                
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BONUS_ELEMENT",29, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BONUS_STR ::= BONUS_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BONUS_STR",28, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BONUS_STR ::= BONUS_STR BONUS_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BONUS_STR",28, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BONUS ::= init_bonus BONUS_STR end_bonus 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("BONUS",27, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WEAPON ::= id open_parens int_value comma int_value close_parens 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).value;
		int initValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).left;
		int initValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).right;
		String initValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).value;
		int endValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).left;
		int endValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).right;
		String endValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).value;
		
                    HashMap<String, String> weapon = new HashMap<>();
                    weapon.put("name", name);
                    weapon.put("init", initValue);
                    weapon.put("end", endValue);
                    this.parser.weapons.add(weapon);
                
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WEAPON",26, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // WEAPONS_STR ::= WEAPON 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WEAPONS_STR",25, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // WEAPONS_STR ::= WEAPONS_STR WEAPON 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WEAPONS_STR",25, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WEAPONS ::= init_weapons WEAPONS_STR end_weapons 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WEAPONS",24, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXTRAS_ELEMENT ::= BONUS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("EXTRAS_ELEMENT",23, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXTRAS_ELEMENT ::= WEAPONS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("EXTRAS_ELEMENT",23, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXTRAS_STR ::= EXTRAS_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("EXTRAS_STR",22, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXTRAS_STR ::= EXTRAS_STR EXTRAS_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("EXTRAS_STR",22, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXTRAS ::= init_extras EXTRAS_STR end_extras 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("EXTRAS",21, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WALL_INT_B ::= int_value dot dot int_value 
            {
              Object RESULT =null;
		int initBleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).left;
		int initBright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).right;
		String initB = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).value;
		int endBleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int endBright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String endB = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
                    this.parser.initB = initB;
                    this.parser.endB = endB;
                
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALL_INT_B",20, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WALL_INT_B ::= int_value 
            {
              Object RESULT =null;
		int initBleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int initBright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String initB = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
                    this.parser.initB = initB;
                
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALL_INT_B",20, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WALL_INT_A ::= int_value dot dot int_value 
            {
              Object RESULT =null;
		int initAleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).left;
		int initAright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).right;
		String initA = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).value;
		int endAleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int endAright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String endA = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
                    this.parser.initA = initA;
                    this.parser.endA = endA;
                
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALL_INT_A",19, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WALL_INT_A ::= int_value 
            {
              Object RESULT =null;
		int initAleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int initAright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String initA = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
                    this.parser.initA = initA;
                
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALL_INT_A",19, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WALL ::= id open_parens WALL_INT_A comma WALL_INT_B close_parens 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).value;
		
    HashMap<String, String> wall = new HashMap<>();
    wall.put("name", name);
    wall.put("initA", this.parser.initA);
    if( this.parser.endA != null) {
        wall.put("endA", this.parser.endA);
        this.parser.endA = null;
    }
    wall.put("initB", this.parser.initB);
    if(this.parser.endA != null) {
        wall.put("endB", this.parser.endB);
        this.parser.endB = null;
    }
    this.parser.initA = null;
    this.parser.initB = null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALL",18, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WALLS_STR ::= WALLS_STR WALL 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALLS_STR",17, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WALLS_STR ::= WALL 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALLS_STR",17, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WALLS ::= init_walls WALLS_STR end_walls 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("WALLS",16, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENEMY ::= id open_parens int_value comma int_value close_parens 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).value;
		int initValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).left;
		int initValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).right;
		String initValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).value;
		int endValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).left;
		int endValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).right;
		String endValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).value;
		
    HashMap<String, String> enemy = new HashMap<>();
    enemy.put("name", name);
    enemy.put("init", initValue);
    enemy.put("end", endValue);
    this.parser.enemies.add(enemy);

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ENEMY",15, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ENEMIES_STR ::= ENEMIES_STR ENEMY 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ENEMIES_STR",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ENEMIES_STR ::= ENEMY 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ENEMIES_STR",14, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ENEMIES ::= init_enemies ENEMIES_STR end_enemies 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("ENEMIES",13, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // HERO ::= id open_parens int_value comma int_value close_parens 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)).value;
		int initValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).left;
		int initValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).right;
		String initValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-3)).value;
		int endValueleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).left;
		int endValueright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).right;
		String endValue = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).value;
		
    this.parser.hero.put("name", name);
    this.parser.hero.put("init", initValue);
    this.parser.hero.put("end", endValue);

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("HERO",12, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-5)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // HEROES ::= init_heroes HERO end_heroes 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("HEROES",11, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CHARACTER ::= ENEMIES 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CHARACTER ::= HEROES 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CHARACTERS_STR ::= CHARACTERS_STR CHARACTER 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("CHARACTERS_STR",9, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CHARACTERS_STR ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("CHARACTERS_STR",9, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CHARACTERS ::= init_characters CHARACTERS_STR end_characters 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("CHARACTERS",8, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SCN_ELEMENT ::= FINISH 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SCN_ELEMENT ::= EXTRAS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SCN_ELEMENT ::= WALLS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SCN_ELEMENT ::= CHARACTERS 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SCN_ELEMENTS ::= SCN_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SCN_ELEMENTS ::= SCN_ELEMENTS SCN_ELEMENT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SCN_HEIGHT ::= height equal int_value 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
    this.parser.height = Integer.parseInt(h);

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_HEIGHT",5, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SCN_WIDTH ::= width equal int_value 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
    this.parser.width = Integer.parseInt(w);

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_WIDTH",4, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SCN_BACKGROUND ::= background equal id 
            {
              Object RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()).right;
		String bg = (String)((java_cup.runtime.Symbol) CUP$StructureParser$stack.peek()).value;
		
    this.parser.bg = bg;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_BACKGROUND",3, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SCN_ATTR ::= SCN_HEIGHT 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ATTR",2, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SCN_ATTR ::= SCN_WIDTH 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ATTR",2, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SCN_ATTR ::= SCN_BACKGROUND 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ATTR",2, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SCN_ATTRS ::= SCN_ATTR 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ATTRS",1, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SCN_ATTRS ::= SCN_ATTRS semicolon SCN_ATTR 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("SCN_ATTRS",1, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-2)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= init_scenario SCN_ATTRS more_than SCN_ELEMENTS end_scenario 
            {
              Object RESULT =null;

              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-4)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          return CUP$StructureParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)).value;
		RESULT = start_val;
              CUP$StructureParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StructureParser$stack.elementAt(CUP$StructureParser$top-1)), ((java_cup.runtime.Symbol)CUP$StructureParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StructureParser$parser.done_parsing();
          return CUP$StructureParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

