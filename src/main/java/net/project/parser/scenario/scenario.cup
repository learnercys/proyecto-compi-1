package net.project.parser.scenario;

import java_cup.runtime.Symbol;

/*
 * Inserted in ScenarioParser
 */
parser code
{:
    public boolean hasUnRecoveredSyntaxError = false;

    public void syntax_error( Symbol currentToken ) {
        // just to avoid native syntax_error method.
    }

    public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception {
        // has an un-recovered syntax error(structure error)
        this.hasUnRecoveredSyntaxError = true;
    }

:}

/*
 *
 */

terminal String

    // main structures (tags)
    init_scenario,
    end_scenario,
    init_characters,
    end_characters,
    init_heroes,
    end_heroes,
    init_enemies,
    end_enemies,
    init_walls,
    end_walls,
    init_extras,
    end_extras,
    init_weapons,
    end_weapons,
    init_bonus,
    end_bonus,
    finish,

    // single chars
    close_parens,
    dot,
    equal,
    more_than,
    open_parens,
    semicolon,
    comma,

    // single words
    background,
    height,
    width,

    // ER
    int_value,
    id
    ;

non terminal
    START,

    SCN_ATTRS,
    SCN_ATTR,
    SCN_BACKGROUND,
    SCN_WIDTH,
    SCN_HEIGHT,

    SCN_ELEMENTS,
    SCN_ELEMENT,

    CHARACTERS,
    CHARACTERS_STR,
    CHARACTER,
    HEROES,
    HERO,
    ENEMIES,
    ENEMIES_STR,
    ENEMY,

    WALLS,
    WALL,
    WALL_INT,

    EXTRAS,
    EXTRAS_STR,
    EXTRAS_ELEMENT,
    WEAPONS,
    WEAPONS_STR,
    WEAPON,
    BONUS,
    BONUS_STR,
    BONUS_ELEMENT,

    FINISH;

/*
 * <x-escenario attrs > /elements/ </x-escenario>
 */
START::= init_scenario SCN_ATTRS more_than SCN_ELEMENTS end_scenario;

// "attr (; attr)* "
SCN_ATTRS::= SCN_ATTRS semicolon SCN_ATTR
             | SCN_ATTR;

SCN_ATTR::=  SCN_BACKGROUND
           | SCN_WIDTH
           | SCN_HEIGHT;

// "background =  [a-z][a-z0-9]+"
SCN_BACKGROUND::= background equal id;

// "ancho = [:digit:]+"
SCN_WIDTH::= width equal int_value;

// "alto = [:digit:]+"
SCN_HEIGHT::= height equal int_value;


SCN_ELEMENTS::= SCN_ELEMENTS SCN_ELEMENT
                | SCN_ELEMENT;

SCN_ELEMENT::=  CHARACTERS
                | WALLS
                | EXTRAS
                | FINISH;

// "<x-personajes> </x-personajes>"
CHARACTERS::=   init_characters CHARACTERS_STR end_characters;

CHARACTERS_STR::=   CHARACTERS CHARACTER
                    | CHARACTER;

CHARACTER::=    HEROES
                | ENEMIES;

// "<x-heroes> </x-heroes>"
HEROES::= init_heroes HERO end_heroes;

// "hero_name ([:digit:], [:digit:])"
HERO::= id open_parens int_value comma int_value close_parens;

// "<x-enemigos> </x-enemigos>"
ENEMIES::= init_enemies ENEMIES_STR  end_enemies;

ENEMIES_STR::=  ENEMIES_STR ENEMY
                | ENEMY;

// "enemy_name([:digit:], [:digit:])"
ENEMY::= id open_parens int_value comma int_value close_parens;

WALLS::= init_walls WALL end_walls;

WALL::= id open_parens WALL_INT comma WALL_INT close_parens;

WALL_INT::= int_value
            | int_value dot dot int_value;


EXTRAS::= init_extras EXTRAS_STR  end_extras;

EXTRAS_STR::=   EXTRAS_STR EXTRAS_ELEMENT
                | EXTRAS_ELEMENT;

EXTRAS_ELEMENT::=   WEAPONS
                    | BONUS;

WEAPONS::=  init_weapons WEAPONS_STR end_weapons;

WEAPONS_STR::=  WEAPONS_STR WEAPON
                | WEAPON;

WEAPON::=       id open_parens int_value comma int_value close_parens;

BONUS::=    init_bonus BONUS_STR end_bonus;

BONUS_STR::=    BONUS_STR BONUS_ELEMENT
                | BONUS_ELEMENT;

BONUS_ELEMENT::= id open_parens int_value comma int_value close_parens;


FINISH::= finish id open_parens int_value comma int_value close_parens finish;


