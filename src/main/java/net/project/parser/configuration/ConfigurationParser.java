
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 04 04:00:06 CST 2015
//----------------------------------------------------

package net.project.parser.configuration;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 04 04:00:06 CST 2015
  */
public class ConfigurationParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConfigurationParser() {super();}

  /** Constructor which sets the default scanner. */
  public ConfigurationParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConfigurationParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\004\000\002" +
    "\010\005\000\002\011\003\000\002\011\003\000\002\012" +
    "\005\000\002\013\005\000\002\014\005\000\002\015\003" +
    "\000\002\015\005\000\002\016\005\000\002\017\004\000" +
    "\002\017\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\005\000\002\022\005\000\002\023\005" +
    "\000\002\024\003\000\002\024\003\000\002\025\005\000" +
    "\002\026\005\000\002\027\005\000\002\030\005\000\002" +
    "\031\003\000\002\031\005\000\002\032\005\000\002\033" +
    "\004\000\002\033\005\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\005\000\002\036\005\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\005\000\002\041\005\000\002\042\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\004\004\001\002\000\010\006\013\010" +
    "\015\012\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\012\005\ufffb\006\ufffb\010\ufffb\012" +
    "\ufffb\001\002\000\004\015\114\001\002\000\012\005\111" +
    "\006\013\010\015\012\010\001\002\000\012\005\ufffd\006" +
    "\ufffd\010\ufffd\012\ufffd\001\002\000\004\015\067\001\002" +
    "\000\012\005\ufffc\006\ufffc\010\ufffc\012\ufffc\001\002\000" +
    "\004\015\020\001\002\000\012\005\uffff\006\uffff\010\uffff" +
    "\012\uffff\001\002\000\006\011\063\014\062\001\002\000" +
    "\016\021\031\022\025\023\023\026\033\027\032\030\037" +
    "\001\002\000\006\011\uffef\014\uffef\001\002\000\004\020" +
    "\uffe5\001\002\000\004\017\056\001\002\000\004\020\055" +
    "\001\002\000\004\017\053\001\002\000\020\016\051\021" +
    "\031\022\025\023\023\026\033\027\032\030\037\001\002" +
    "\000\004\020\uffe9\001\002\000\004\020\uffe8\001\002\000" +
    "\004\017\046\001\002\000\004\017\044\001\002\000\004" +
    "\017\042\001\002\000\004\020\uffea\001\002\000\004\020" +
    "\uffe6\001\002\000\004\020\uffe7\001\002\000\004\017\040" +
    "\001\002\000\004\041\041\001\002\000\004\020\uffdd\001" +
    "\002\000\004\040\043\001\002\000\004\020\uffdf\001\002" +
    "\000\004\040\045\001\002\000\004\020\uffde\001\002\000" +
    "\004\037\047\001\002\000\004\020\uffe4\001\002\000\004" +
    "\020\052\001\002\000\006\011\uffed\014\uffed\001\002\000" +
    "\020\016\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\001\002\000\004\041\054\001\002\000\004\020" +
    "\uffe3\001\002\000\020\016\uffec\021\uffec\022\uffec\023\uffec" +
    "\026\uffec\027\uffec\030\uffec\001\002\000\006\024\060\025" +
    "\057\001\002\000\004\020\uffe0\001\002\000\004\020\uffe1" +
    "\001\002\000\004\020\uffe2\001\002\000\004\015\020\001" +
    "\002\000\012\005\ufff0\006\ufff0\010\ufff0\012\ufff0\001\002" +
    "\000\006\011\uffee\014\uffee\001\002\000\006\007\ufff9\014" +
    "\ufff9\001\002\000\006\007\107\014\106\001\002\000\006" +
    "\021\071\022\075\001\002\000\004\020\105\001\002\000" +
    "\004\017\103\001\002\000\004\020\ufff4\001\002\000\004" +
    "\020\ufff3\001\002\000\010\016\101\021\071\022\075\001" +
    "\002\000\004\017\076\001\002\000\004\041\077\001\002" +
    "\000\004\020\ufff1\001\002\000\004\020\102\001\002\000" +
    "\006\007\ufff7\014\ufff7\001\002\000\010\016\ufff5\021\ufff5" +
    "\022\ufff5\001\002\000\004\037\104\001\002\000\004\020" +
    "\ufff2\001\002\000\010\016\ufff6\021\ufff6\022\ufff6\001\002" +
    "\000\004\015\067\001\002\000\012\005\ufffa\006\ufffa\010" +
    "\ufffa\012\ufffa\001\002\000\006\007\ufff8\014\ufff8\001\002" +
    "\000\004\002\000\001\002\000\012\005\ufffe\006\ufffe\010" +
    "\ufffe\012\ufffe\001\002\000\004\013\157\001\002\000\014" +
    "\021\127\022\122\023\121\027\130\036\124\001\002\000" +
    "\006\013\uffdb\014\116\001\002\000\004\015\114\001\002" +
    "\000\004\013\uffda\001\002\000\004\020\uffd3\001\002\000" +
    "\004\017\150\001\002\000\004\017\146\001\002\000\004" +
    "\020\145\001\002\000\004\017\143\001\002\000\004\020" +
    "\uffd2\001\002\000\004\020\uffd5\001\002\000\004\017\141" +
    "\001\002\000\004\017\137\001\002\000\004\020\uffd4\001" +
    "\002\000\004\020\uffd6\001\002\000\016\016\135\021\127" +
    "\022\122\023\121\027\130\036\124\001\002\000\004\020" +
    "\136\001\002\000\006\013\uffd9\014\uffd9\001\002\000\016" +
    "\016\uffd7\021\uffd7\022\uffd7\023\uffd7\027\uffd7\036\uffd7\001" +
    "\002\000\004\040\140\001\002\000\004\020\uffc9\001\002" +
    "\000\004\037\142\001\002\000\004\020\uffd1\001\002\000" +
    "\004\040\144\001\002\000\004\020\uffc8\001\002\000\016" +
    "\016\uffd8\021\uffd8\022\uffd8\023\uffd8\027\uffd8\036\uffd8\001" +
    "\002\000\004\041\147\001\002\000\004\020\uffca\001\002" +
    "\000\014\031\154\032\151\033\152\034\156\035\155\001" +
    "\002\000\004\020\uffce\001\002\000\004\020\uffcd\001\002" +
    "\000\004\020\uffd0\001\002\000\004\020\uffcf\001\002\000" +
    "\004\020\uffcb\001\002\000\004\020\uffcc\001\002\000\012" +
    "\005\uffdc\006\uffdc\010\uffdc\012\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\014\003\010\004" +
    "\015\005\011\014\013\030\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\112\032" +
    "\114\001\001\000\012\004\111\005\011\014\013\030\006" +
    "\001\001\000\002\001\001\000\006\006\065\007\064\001" +
    "\001\000\002\001\001\000\006\015\016\016\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\017\025\020" +
    "\023\021\033\022\026\023\027\025\035\026\034\027\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\047" +
    "\021\033\022\026\023\027\025\035\026\034\027\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\073\011\067\012\071\013\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\077\012\071\013\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\033\132\034\122\035\131\036\125\040\130\041\117" +
    "\042\124\001\001\000\002\001\001\000\006\031\116\032" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\034\133\035\131\036\125\040\130\041\117\042\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConfigurationParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConfigurationParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConfigurationParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public boolean hasUnRecoveredSyntaxError = false;

	public void syntax_error(Symbol cur_token) {
		// nothing to do, just to avoid native syntax_error method.
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
		// has some un-recovered syntax error(structure error)
		this.hasUnRecoveredSyntaxError = true;
        System.out.print("s: " + s.sym);
        System.out.print(", yyline: " + s.left );
        System.out.println(", yycolumn: " + s.right );
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConfigurationParser$actions {
  private final ConfigurationParser parser;

  /** Constructor */
  CUP$ConfigurationParser$actions(ConfigurationParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConfigurationParser$do_action(
    int                        CUP$ConfigurationParser$act_num,
    java_cup.runtime.lr_parser CUP$ConfigurationParser$parser,
    java.util.Stack            CUP$ConfigurationParser$stack,
    int                        CUP$ConfigurationParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConfigurationParser$result;

      /* select the action based on the action number */
      switch (CUP$ConfigurationParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DG_X_CREDIT ::= x_credit equal int_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_CREDIT",32, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DG_X_DESTROY ::= x_destroy equal int_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_DESTROY",31, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DG_X_PICTURE ::= x_picture equal string_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_PICTURE",30, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DG_X_TYPE_VALUE ::= x_weapon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DG_X_TYPE_VALUE ::= x_bomb 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DG_X_TYPE_VALUE ::= x_bonus 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DG_X_TYPE_VALUE ::= x_block 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DG_X_TYPE_VALUE ::= x_finish 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE_VALUE",29, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DG_X_TYPE ::= x_type equal DG_X_TYPE_VALUE 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)).value;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_TYPE",28, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DG_X_NAME ::= x_name equal id 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_X_NAME",27, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DG_ELEMENT ::= DG_X_CREDIT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DG_ELEMENT ::= DG_X_DESTROY 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DG_ELEMENT ::= DG_X_PICTURE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DG_ELEMENT ::= DG_X_TYPE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DG_ELEMENT ::= DG_X_NAME 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENT",26, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DG_ELEMENTS ::= DG_ELEMENTS DG_ELEMENT semicolon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENTS",25, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DG_ELEMENTS ::= DG_ELEMENT semicolon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_ELEMENTS",25, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DG_OBJECT ::= open_brace DG_ELEMENTS close_brace 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_OBJECT",24, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DG_IN ::= DG_OBJECT comma DG_IN 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_IN",23, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DG_IN ::= DG_OBJECT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DG_IN",23, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DESIGN ::= init_design DG_IN end_design 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("DESIGN",22, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FG_X_DESCRIPTION ::= x_description equal string_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_DESCRIPTION",21, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FG_X_DESTROY ::= x_destroy equal int_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_DESTROY",20, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FG_X_LIVE ::= x_live equal int_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_LIVE",19, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FG_X_TYPE_VALUE ::= x_enemy 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_TYPE_VALUE",18, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FG_X_TYPE_VALUE ::= x_hero 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_TYPE_VALUE",18, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FG_X_TYPE ::= x_type equal FG_X_TYPE_VALUE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_TYPE",17, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FG_X_PICTURE ::= x_picture equal string_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_PICTURE",16, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FG_X_NAME ::= x_name equal id 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_X_NAME",15, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FG_ELEMENT ::= FG_X_DESCRIPTION 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FG_ELEMENT ::= FG_X_DESTROY 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FG_ELEMENT ::= FG_X_LIVE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FG_ELEMENT ::= FG_X_TYPE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FG_ELEMENT ::= FG_X_PICTURE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FG_ELEMENT ::= FG_X_NAME 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENT",14, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FG_ELEMENTS ::= FG_ELEMENTS FG_ELEMENT semicolon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENTS",13, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FG_ELEMENTS ::= FG_ELEMENT semicolon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_ELEMENTS",13, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FG_OBJECT ::= open_brace FG_ELEMENTS close_brace 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_OBJECT",12, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FG_IN ::= FG_IN comma FG_OBJECT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_IN",11, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FG_IN ::= FG_OBJECT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FG_IN",11, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FIGURE ::= init_figure FG_IN end_figure 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("FIGURE",10, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BG_X_PICTURE ::= x_picture equal string_value 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_X_PICTURE",9, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BG_X_NAME ::= x_name equal id 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_X_NAME",8, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BG_ELEMENT ::= BG_X_PICTURE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BG_ELEMENT ::= BG_X_NAME 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENT",7, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BG_ELEMENTS ::= BG_ELEMENTS BG_ELEMENT semicolon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BG_ELEMENTS ::= BG_ELEMENT semicolon 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BG_OBJECT ::= open_brace BG_ELEMENTS close_brace 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_OBJECT",5, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BG_IN ::= BG_IN comma BG_OBJECT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_IN",4, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BG_IN ::= BG_OBJECT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BG_IN",4, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BACKGROUND ::= init_background BG_IN end_background 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("BACKGROUND",3, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ELEMENT ::= DESIGN 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("ELEMENT",2, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ELEMENT ::= FIGURE 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("ELEMENT",2, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ELEMENT ::= BACKGROUND 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("ELEMENT",2, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ELEMENTS ::= ELEMENTS ELEMENT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",1, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ELEMENTS ::= ELEMENT 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",1, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= init_configuration ELEMENTS end_configuration 
            {
              Object RESULT =null;

              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-2)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          return CUP$ConfigurationParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)).value;
		RESULT = start_val;
              CUP$ConfigurationParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.elementAt(CUP$ConfigurationParser$top-1)), ((java_cup.runtime.Symbol)CUP$ConfigurationParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConfigurationParser$parser.done_parsing();
          return CUP$ConfigurationParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

